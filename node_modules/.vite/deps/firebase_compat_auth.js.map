{
  "version": 3,
  "sources": ["../../@firebase/auth/src/platform_cordova/plugins.ts", "../../@firebase/auth/src/platform_cordova/popup_redirect/utils.ts", "../../@firebase/auth/src/platform_cordova/popup_redirect/events.ts", "../../@firebase/auth/src/platform_cordova/popup_redirect/popup_redirect.ts", "../../@firebase/auth/internal/index.ts", "../../@firebase/auth-compat/src/platform.ts", "../../@firebase/auth-compat/src/persistence.ts", "../../@firebase/auth-compat/src/popup_redirect.ts", "../../@firebase/auth-compat/src/wrap.ts", "../../@firebase/auth-compat/src/user_credential.ts", "../../@firebase/auth-compat/src/user.ts", "../../@firebase/auth-compat/src/auth.ts", "../../@firebase/auth-compat/src/phone_auth_provider.ts", "../../@firebase/auth-compat/src/recaptcha_verifier.ts", "../../@firebase/auth-compat/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface CordovaWindow extends Window {\n  cordova: {\n    plugins: {\n      browsertab: {\n        isAvailable(cb: (available: boolean) => void): void;\n        openUrl(url: string): void;\n        close(): void;\n      };\n    };\n\n    InAppBrowser: {\n      open(url: string, target: string, options: string): InAppBrowserRef;\n    };\n  };\n\n  universalLinks: {\n    subscribe(\n      n: null,\n      cb: (event: Record<string, string> | null) => void\n    ): void;\n  };\n\n  BuildInfo: {\n    readonly packageName: string;\n    readonly displayName: string;\n  };\n\n  handleOpenURL(url: string): void;\n}\n\nexport interface InAppBrowserRef {\n  close?: () => void;\n}\n\nexport function _cordovaWindow(): CordovaWindow {\n  return window as unknown as CordovaWindow;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  debugAssert,\n  _assert,\n  _createError,\n  _fail\n} from '../../core/util/assert';\nimport { _isAndroid, _isIOS, _isIOS7Or8 } from '../../core/util/browser';\nimport { _getRedirectUrl } from '../../core/util/handler';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent } from '../../model/popup_redirect';\nimport { InAppBrowserRef, _cordovaWindow } from '../plugins';\nimport {\n  GetProjectConfigRequest,\n  _getProjectConfig\n} from '../../api/project_config/get_project_config';\n\n/**\n * How long to wait after the app comes back into focus before concluding that\n * the user closed the sign in tab.\n */\nconst REDIRECT_TIMEOUT_MS = 2000;\n\n/**\n * Generates the URL for the OAuth handler.\n */\nexport async function _generateHandlerUrl(\n  auth: AuthInternal,\n  event: AuthEvent,\n  provider: AuthProvider\n): Promise<string> {\n  // Get the cordova plugins\n  const { BuildInfo } = _cordovaWindow();\n  debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');\n  const sessionDigest = await computeSha256(event.sessionId);\n\n  const additionalParams: Record<string, string> = {};\n  if (_isIOS()) {\n    // iOS app identifier\n    additionalParams['ibi'] = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    // Android app identifier\n    additionalParams['apn'] = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Add the display name if available\n  if (BuildInfo.displayName) {\n    additionalParams['appDisplayName'] = BuildInfo.displayName;\n  }\n\n  // Attached the hashed session ID\n  additionalParams['sessionId'] = sessionDigest;\n  return _getRedirectUrl(\n    auth,\n    provider,\n    event.type,\n    undefined,\n    event.eventId ?? undefined,\n    additionalParams\n  );\n}\n\n/**\n * Validates that this app is valid for this project configuration\n */\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  const { BuildInfo } = _cordovaWindow();\n  const request: GetProjectConfigRequest = {};\n  if (_isIOS()) {\n    request.iosBundleId = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    request.androidPackageName = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Will fail automatically if package name is not authorized\n  await _getProjectConfig(auth, request);\n}\n\nexport function _performRedirect(\n  handlerUrl: string\n): Promise<InAppBrowserRef | null> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  return new Promise(resolve => {\n    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {\n      let iabRef: InAppBrowserRef | null = null;\n      if (browserTabIsAvailable) {\n        cordova.plugins.browsertab.openUrl(handlerUrl);\n      } else {\n        // TODO: Return the inappbrowser ref that's returned from the open call\n        iabRef = cordova.InAppBrowser.open(\n          handlerUrl,\n          _isIOS7Or8() ? '_blank' : '_system',\n          'location=yes'\n        );\n      }\n      resolve(iabRef);\n    });\n  });\n}\n\n// Thin interface wrapper to avoid circular dependency with ./events module\ninterface PassiveAuthEventListener {\n  addPassiveListener(cb: () => void): void;\n  removePassiveListener(cb: () => void): void;\n}\n\n/**\n * This function waits for app activity to be seen before resolving. It does\n * this by attaching listeners to various dom events. Once the app is determined\n * to be visible, this promise resolves. AFTER that resolution, the listeners\n * are detached and any browser tabs left open will be closed.\n */\nexport async function _waitForAppResume(\n  auth: AuthInternal,\n  eventListener: PassiveAuthEventListener,\n  iabRef: InAppBrowserRef | null\n): Promise<void> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  let cleanup = (): void => {};\n  try {\n    await new Promise<void>((resolve, reject) => {\n      let onCloseTimer: number | null = null;\n\n      // DEFINE ALL THE CALLBACKS =====\n      function authEventSeen(): void {\n        // Auth event was detected. Resolve this promise and close the extra\n        // window if it's still open.\n        resolve();\n        const closeBrowserTab = cordova.plugins.browsertab?.close;\n        if (typeof closeBrowserTab === 'function') {\n          closeBrowserTab();\n        }\n        // Close inappbrowser emebedded webview in iOS7 and 8 case if still\n        // open.\n        if (typeof iabRef?.close === 'function') {\n          iabRef.close();\n        }\n      }\n\n      function resumed(): void {\n        if (onCloseTimer) {\n          // This code already ran; do not rerun.\n          return;\n        }\n\n        onCloseTimer = window.setTimeout(() => {\n          // Wait two seeconds after resume then reject.\n          reject(_createError(auth, AuthErrorCode.REDIRECT_CANCELLED_BY_USER));\n        }, REDIRECT_TIMEOUT_MS);\n      }\n\n      function visibilityChanged(): void {\n        if (document?.visibilityState === 'visible') {\n          resumed();\n        }\n      }\n\n      // ATTACH ALL THE LISTENERS =====\n      // Listen for the auth event\n      eventListener.addPassiveListener(authEventSeen);\n\n      // Listen for resume and visibility events\n      document.addEventListener('resume', resumed, false);\n      if (_isAndroid()) {\n        document.addEventListener('visibilitychange', visibilityChanged, false);\n      }\n\n      // SETUP THE CLEANUP FUNCTION =====\n      cleanup = () => {\n        eventListener.removePassiveListener(authEventSeen);\n        document.removeEventListener('resume', resumed, false);\n        document.removeEventListener(\n          'visibilitychange',\n          visibilityChanged,\n          false\n        );\n        if (onCloseTimer) {\n          window.clearTimeout(onCloseTimer);\n        }\n      };\n    });\n  } finally {\n    cleanup();\n  }\n}\n\n/**\n * Checks the configuration of the Cordova environment. This has no side effect\n * if the configuration is correct; otherwise it throws an error with the\n * missing plugin.\n */\nexport function _checkCordovaConfiguration(auth: AuthInternal): void {\n  const win = _cordovaWindow();\n  // Check all dependencies installed.\n  // https://github.com/nordnet/cordova-universal-links-plugin\n  // Note that cordova-universal-links-plugin has been abandoned.\n  // A fork with latest fixes is available at:\n  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix\n  _assert(\n    typeof win?.universalLinks?.subscribe === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-universal-links-plugin-fix'\n    }\n  );\n\n  // https://www.npmjs.com/package/cordova-plugin-buildinfo\n  _assert(\n    typeof win?.BuildInfo?.packageName !== 'undefined',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-buildInfo'\n    }\n  );\n\n  // https://github.com/google/cordova-plugin-browsertab\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.openUrl === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.isAvailable === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n\n  // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/\n  _assert(\n    typeof win?.cordova?.InAppBrowser?.open === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-inappbrowser'\n    }\n  );\n}\n\n/**\n * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only\n * available in \"secure\" contexts, which covers Cordova (which is served on a file\n * protocol).\n */\nasync function computeSha256(sessionId: string): Promise<string> {\n  const bytes = stringToArrayBuffer(sessionId);\n\n  // TODO: For IE11 crypto has a different name and this operation comes back\n  //       as an object, not a promise. This is the old proposed standard that\n  //       is used by IE11:\n  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface\n  const buf = await crypto.subtle.digest('SHA-256', bytes);\n  const arr = Array.from(new Uint8Array(buf));\n  return arr.map(num => num.toString(16).padStart(2, '0')).join('');\n}\n\nfunction stringToArrayBuffer(str: string): Uint8Array {\n  // This function is only meant to deal with an ASCII charset and makes\n  // certain simplifying assumptions.\n  debugAssert(\n    /[0-9a-zA-Z]+/.test(str),\n    'Can only convert alpha-numeric strings'\n  );\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(str);\n  }\n\n  const buff = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buff);\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n  return view;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystringDecode } from '@firebase/util';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../../core/errors';\nimport { PersistedBlob, PersistenceInternal } from '../../core/persistence';\nimport {\n  KeyName,\n  _persistenceKeyName\n} from '../../core/persistence/persistence_user_manager';\nimport { _createError } from '../../core/util/assert';\nimport { _getInstance } from '../../core/util/instantiator';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent, AuthEventType } from '../../model/popup_redirect';\nimport { browserLocalPersistence } from '../../platform_browser/persistence/local_storage';\n\nconst SESSION_ID_LENGTH = 20;\n\n/** Custom AuthEventManager that adds passive listeners to events */\nexport class CordovaAuthEventManager extends AuthEventManager {\n  private readonly passiveListeners = new Set<(e: AuthEvent) => void>();\n  private resolveInialized!: () => void;\n  private initPromise = new Promise<void>(resolve => {\n    this.resolveInialized = resolve;\n  });\n\n  addPassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.add(cb);\n  }\n\n  removePassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.delete(cb);\n  }\n\n  // In a Cordova environment, this manager can live through multiple redirect\n  // operations\n  resetRedirect(): void {\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n  }\n\n  /** Override the onEvent method */\n  onEvent(event: AuthEvent): boolean {\n    this.resolveInialized();\n    this.passiveListeners.forEach(cb => cb(event));\n    return super.onEvent(event);\n  }\n\n  async initialized(): Promise<void> {\n    await this.initPromise;\n  }\n}\n\n/**\n * Generates a (partial) {@link AuthEvent}.\n */\nexport function _generateNewEvent(\n  auth: AuthInternal,\n  type: AuthEventType,\n  eventId: string | null = null\n): AuthEvent {\n  return {\n    type,\n    eventId,\n    urlResponse: null,\n    sessionId: generateSessionId(),\n    postBody: null,\n    tenantId: auth.tenantId,\n    error: _createError(auth, AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n\nexport function _savePartialEvent(\n  auth: AuthInternal,\n  event: AuthEvent\n): Promise<void> {\n  return storage()._set(persistenceKey(auth), event as object as PersistedBlob);\n}\n\nexport async function _getAndRemoveEvent(\n  auth: AuthInternal\n): Promise<AuthEvent | null> {\n  const event = (await storage()._get(\n    persistenceKey(auth)\n  )) as AuthEvent | null;\n  if (event) {\n    await storage()._remove(persistenceKey(auth));\n  }\n  return event;\n}\n\nexport function _eventFromPartialAndUrl(\n  partialEvent: AuthEvent,\n  url: string\n): AuthEvent | null {\n  // Parse the deep link within the dynamic link URL.\n  const callbackUrl = _getDeepLinkFromCallback(url);\n  // Confirm it is actually a callback URL.\n  // Currently the universal link will be of this format:\n  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>\n  // This is a fake URL but is not intended to take the user anywhere\n  // and just redirect to the app.\n  if (callbackUrl.includes('/__/auth/callback')) {\n    // Check if there is an error in the URL.\n    // This mechanism is also used to pass errors back to the app:\n    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>\n    const params = searchParamsOrEmpty(callbackUrl);\n    // Get the error object corresponding to the stringified error if found.\n    const errorObject = params['firebaseError']\n      ? parseJsonOrNull(decodeURIComponent(params['firebaseError']))\n      : null;\n    const code = errorObject?.['code']?.split('auth/')?.[1];\n    const error = code ? _createError(code) : null;\n    if (error) {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        error,\n        urlResponse: null,\n        sessionId: null,\n        postBody: null\n      };\n    } else {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        sessionId: partialEvent.sessionId,\n        urlResponse: callbackUrl,\n        postBody: null\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction generateSessionId(): string {\n  const chars = [];\n  const allowedChars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < SESSION_ID_LENGTH; i++) {\n    const idx = Math.floor(Math.random() * allowedChars.length);\n    chars.push(allowedChars.charAt(idx));\n  }\n  return chars.join('');\n}\n\nfunction storage(): PersistenceInternal {\n  return _getInstance(browserLocalPersistence);\n}\n\nfunction persistenceKey(auth: AuthInternal): string {\n  return _persistenceKeyName(KeyName.AUTH_EVENT, auth.config.apiKey, auth.name);\n}\n\nfunction parseJsonOrNull(json: string): ReturnType<typeof JSON.parse> | null {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}\n\n// Exported for testing\nexport function _getDeepLinkFromCallback(url: string): string {\n  const params = searchParamsOrEmpty(url);\n  const link = params['link'] ? decodeURIComponent(params['link']) : undefined;\n  // Double link case (automatic redirect)\n  const doubleDeepLink = searchParamsOrEmpty(link)['link'];\n  // iOS custom scheme links.\n  const iOSDeepLink = params['deep_link_id']\n    ? decodeURIComponent(params['deep_link_id'])\n    : undefined;\n  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * Optimistically tries to get search params from a string, or else returns an\n * empty search params object.\n */\nfunction searchParamsOrEmpty(url: string | undefined): Record<string, string> {\n  if (!url?.includes('?')) {\n    return {};\n  }\n\n  const [_, ...rest] = url.split('?');\n  return querystringDecode(rest.join('?')) as Record<string, string>;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../../model/public_types';\nimport { browserSessionPersistence } from '../../platform_browser/persistence/session_storage';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { AuthPopup } from '../../platform_browser/util/popup';\nimport { _createError, _fail } from '../../core/util/assert';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _checkCordovaConfiguration,\n  _generateHandlerUrl,\n  _performRedirect,\n  _validateOrigin,\n  _waitForAppResume\n} from './utils';\nimport {\n  CordovaAuthEventManager,\n  _eventFromPartialAndUrl,\n  _generateNewEvent,\n  _getAndRemoveEvent,\n  _savePartialEvent\n} from './events';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { _getRedirectResult } from '../../platform_browser/strategies/redirect';\nimport {\n  _clearRedirectOutcomes,\n  _overrideRedirectResult\n} from '../../core/strategies/redirect';\nimport { _cordovaWindow } from '../plugins';\n\n/**\n * How long to wait for the initial auth event before concluding no\n * redirect pending\n */\nconst INITIAL_EVENT_TIMEOUT_MS = 500;\n\nclass CordovaPopupRedirectResolver implements PopupRedirectResolverInternal {\n  readonly _redirectPersistence = browserSessionPersistence;\n  readonly _shouldInitProactively = true; // This is lightweight for Cordova\n  private readonly eventManagers = new Map<string, CordovaAuthEventManager>();\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  _completeRedirectFn = _getRedirectResult;\n  _overrideRedirectResult = _overrideRedirectResult;\n\n  async _initialize(auth: AuthInternal): Promise<CordovaAuthEventManager> {\n    const key = auth._key();\n    let manager = this.eventManagers.get(key);\n    if (!manager) {\n      manager = new CordovaAuthEventManager(auth);\n      this.eventManagers.set(key, manager);\n      this.attachCallbackListeners(auth, manager);\n    }\n    return manager;\n  }\n\n  _openPopup(auth: AuthInternal): Promise<AuthPopup> {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    _checkCordovaConfiguration(auth);\n    const manager = await this._initialize(auth);\n    await manager.initialized();\n\n    // Reset the persisted redirect states. This does not matter on Web where\n    // the redirect always blows away application state entirely. On Cordova,\n    // the app maintains control flow through the redirect.\n    manager.resetRedirect();\n    _clearRedirectOutcomes();\n\n    await this._originValidation(auth);\n\n    const event = _generateNewEvent(auth, authType, eventId);\n    await _savePartialEvent(auth, event);\n    const url = await _generateHandlerUrl(auth, event, provider);\n    const iabRef = await _performRedirect(url);\n    return _waitForAppResume(auth, manager, iabRef);\n  }\n\n  _isIframeWebStorageSupported(\n    _auth: AuthInternal,\n    _cb: (support: boolean) => unknown\n  ): void {\n    throw new Error('Method not implemented.');\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  private attachCallbackListeners(\n    auth: AuthInternal,\n    manager: AuthEventManager\n  ): void {\n    // Get the global plugins\n    const { universalLinks, handleOpenURL, BuildInfo } = _cordovaWindow();\n\n    const noEventTimeout = setTimeout(async () => {\n      // We didn't see that initial event. Clear any pending object and\n      // dispatch no event\n      await _getAndRemoveEvent(auth);\n      manager.onEvent(generateNoEvent());\n    }, INITIAL_EVENT_TIMEOUT_MS);\n\n    const universalLinksCb = async (\n      eventData: Record<string, string> | null\n    ): Promise<void> => {\n      // We have an event so we can clear the no event timeout\n      clearTimeout(noEventTimeout);\n\n      const partialEvent = await _getAndRemoveEvent(auth);\n      let finalEvent: AuthEvent | null = null;\n      if (partialEvent && eventData?.['url']) {\n        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);\n      }\n\n      // If finalEvent is never filled, trigger with no event\n      manager.onEvent(finalEvent || generateNoEvent());\n    };\n\n    // Universal links subscriber doesn't exist for iOS, so we need to check\n    if (\n      typeof universalLinks !== 'undefined' &&\n      typeof universalLinks.subscribe === 'function'\n    ) {\n      universalLinks.subscribe(null, universalLinksCb);\n    }\n\n    // iOS 7 or 8 custom URL schemes.\n    // This is also the current default behavior for iOS 9+.\n    // For this to work, cordova-plugin-customurlscheme needs to be installed.\n    // https://github.com/EddyVerbruggen/Custom-URL-scheme\n    // Do not overwrite the existing developer's URL handler.\n    const existingHandleOpenURL = handleOpenURL;\n    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;\n    _cordovaWindow().handleOpenURL = async url => {\n      if (url.toLowerCase().startsWith(packagePrefix)) {\n        // We want this intentionally to float\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        universalLinksCb({ url });\n      }\n      // Call the developer's handler if it is present.\n      if (typeof existingHandleOpenURL === 'function') {\n        try {\n          existingHandleOpenURL(url);\n        } catch (e) {\n          // This is a developer error. Don't stop the flow of the SDK.\n          console.error(e);\n        }\n      }\n    };\n  }\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for Cordova\n * based applications.\n *\n * @public\n */\nexport const cordovaPopupRedirectResolver: PopupRedirectResolver =\n  CordovaPopupRedirectResolver;\n\nfunction generateNoEvent(): AuthEvent {\n  return {\n    type: AuthEventType.UNKNOWN,\n    eventId: null,\n    sessionId: null,\n    urlResponse: null,\n    postBody: null,\n    tenantId: null,\n    error: _createError(AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _castAuth } from '../src/core/auth/auth_impl';\nimport { Auth } from '../src/model/public_types';\n\n/**\n * This interface is intended only for use by @firebase/auth-compat, do not use directly\n */\nexport * from '../index';\n\nexport { SignInWithIdpResponse } from '../src/api/authentication/idp';\nexport { AuthErrorCode } from '../src/core/errors';\nexport { PersistenceInternal } from '../src/core/persistence';\nexport { _persistenceKeyName } from '../src/core/persistence/persistence_user_manager';\nexport { UserImpl } from '../src/core/user/user_impl';\nexport { _getInstance } from '../src/core/util/instantiator';\nexport {\n  PopupRedirectResolverInternal,\n  EventManager,\n  AuthEventType\n} from '../src/model/popup_redirect';\nexport { UserCredentialInternal, UserParameters } from '../src/model/user';\nexport { AuthInternal, ConfigInternal } from '../src/model/auth';\nexport { DefaultConfig, AuthImpl, _castAuth } from '../src/core/auth/auth_impl';\n\nexport { ClientPlatform, _getClientVersion } from '../src/core/util/version';\n\nexport { _generateEventId } from '../src/core/util/event_id';\nexport { TaggedWithTokenResponse } from '../src/model/id_token';\nexport { _fail, _assert } from '../src/core/util/assert';\nexport { AuthPopup } from '../src/platform_browser/util/popup';\nexport { _getRedirectResult } from '../src/platform_browser/strategies/redirect';\nexport { _overrideRedirectResult } from '../src/core/strategies/redirect';\nexport { cordovaPopupRedirectResolver } from '../src/platform_cordova/popup_redirect/popup_redirect';\nexport { FetchProvider } from '../src/core/util/fetch_provider';\nexport { SAMLAuthCredential } from '../src/core/credentials/saml';\n\n// This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out\n// of autogenerated documentation pages to reduce accidental misuse.\nexport function addFrameworkForLogging(auth: Auth, framework: string): void {\n  _castAuth(auth)._logFramework(framework);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as impl from '@firebase/auth/internal';\nimport {\n  getUA,\n  isBrowserExtension,\n  isReactNative,\n  isNode,\n  isIE,\n  isIndexedDBAvailable\n} from '@firebase/util';\n\ndeclare global {\n  interface Document {\n    documentMode?: number;\n  }\n}\n\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\n\nfunction _getCurrentScheme(): string | null {\n  return self?.location?.protocol || null;\n}\n\n/**\n * @return {boolean} Whether the current environment is http or https.\n */\nfunction _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\n/**\n * @param {?string=} ua The user agent.\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\n *     Cordova environment.\n */\nexport function _isAndroidOrIosCordovaScheme(ua: string = getUA()): boolean {\n  return !!(\n    (_getCurrentScheme() === 'file:' ||\n      _getCurrentScheme() === 'ionic:' ||\n      _getCurrentScheme() === 'capacitor:') &&\n    ua.toLowerCase().match(/iphone|ipad|ipod|android/)\n  );\n}\n\n/**\n * @return {boolean} Whether the environment is a native environment, where\n *     CORS checks do not apply.\n */\nfunction _isNativeEnvironment(): boolean {\n  return isReactNative() || isNode();\n}\n\n/**\n * Checks whether the user agent is IE11.\n * @return {boolean} True if it is IE11.\n */\nfunction _isIe11(): boolean {\n  return isIE() && document?.documentMode === 11;\n}\n\n/**\n * Checks whether the user agent is Edge.\n * @param {string} userAgent The browser user agent string.\n * @return {boolean} True if it is Edge.\n */\nfunction _isEdge(ua: string = getUA()): boolean {\n  return /Edge\\/\\d+/.test(ua);\n}\n\n/**\n * @param {?string=} opt_userAgent The navigator user agent.\n * @return {boolean} Whether local storage is not synchronized between an iframe\n *     and a popup of the same domain.\n */\nfunction _isLocalStorageNotSynchronized(ua: string = getUA()): boolean {\n  return _isIe11() || _isEdge(ua);\n}\n\n/** @return {boolean} Whether web storage is supported. */\nexport function _isWebStorageSupported(): boolean {\n  try {\n    const storage = self.localStorage;\n    const key = impl._generateEventId();\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key);\n      // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n  return false;\n}\n\n/**\n * @param {?Object=} global The optional global scope.\n * @return {boolean} Whether current environment is a worker.\n */\nexport function _isWorker(): boolean {\n  // WorkerGlobalScope only defined in worker environment.\n  return (\n    typeof global !== 'undefined' &&\n    'WorkerGlobalScope' in global &&\n    'importScripts' in global\n  );\n}\n\nexport function _isPopupRedirectSupported(): boolean {\n  return (\n    (_isHttpOrHttps() ||\n      isBrowserExtension() ||\n      _isAndroidOrIosCordovaScheme()) &&\n    // React Native with remote debugging reports its location.protocol as\n    // http.\n    !_isNativeEnvironment() &&\n    // Local storage has to be supported for browser popup and redirect\n    // operations to work.\n    _isWebStorageSupported() &&\n    // DOM, popups and redirects are not supported within a worker.\n    !_isWorker()\n  );\n}\n\n/** Quick check that indicates the platform *may* be Cordova */\nexport function _isLikelyCordova(): boolean {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\n\nexport async function _isCordova(): Promise<boolean> {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\n\nexport function _getSelfWindow(): Window | null {\n  return typeof window !== 'undefined' ? window : null;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { isIndexedDBAvailable, isNode, isReactNative } from '@firebase/util';\nimport { _getSelfWindow, _isWebStorageSupported, _isWorker } from './platform';\n\nexport const Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\n\nconst _assert: typeof exp._assert = exp._assert;\n\nconst PERSISTENCE_KEY = 'persistence';\n\n/**\n * Validates that an argument is a valid persistence value. If an invalid type\n * is specified, an error is thrown synchronously.\n */\nexport function _validatePersistenceArgument(\n  auth: exp.Auth,\n  persistence: string\n): void {\n  _assert(\n    Object.values(Persistence).includes(persistence),\n    auth,\n    exp.AuthErrorCode.INVALID_PERSISTENCE\n  );\n  // Validate if the specified type is supported in the current environment.\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert(\n      persistence !== Persistence.SESSION,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert(\n      persistence === Persistence.NONE,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert(\n      persistence === Persistence.NONE ||\n        (persistence === Persistence.LOCAL && isIndexedDBAvailable()),\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  // This is restricted by what the browser supports.\n  _assert(\n    persistence === Persistence.NONE || _isWebStorageSupported(),\n    auth,\n    exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n  );\n}\n\nexport async function _savePersistenceForRedirect(\n  auth: exp.AuthInternal\n): Promise<void> {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n  const key = exp._persistenceKeyName(\n    PERSISTENCE_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\n\nexport function _getPersistencesFromRedirect(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  const session = getSessionStorageIfAvailable();\n  if (!session) {\n    return [];\n  }\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n  const persistence = session.getItem(key);\n\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n    default:\n      return [];\n  }\n}\n\n/** Returns session storage, or null if the property access errors */\nfunction getSessionStorageIfAvailable(): Storage | null {\n  try {\n    return _getSelfWindow()?.sessionStorage || null;\n  } catch (e) {\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { _isCordova, _isLikelyCordova } from './platform';\n\nconst _assert: typeof exp._assert = exp._assert;\n\n/** Platform-agnostic popup-redirect resolver */\nexport class CompatPopupRedirectResolver\n  implements exp.PopupRedirectResolverInternal\n{\n  // Create both resolvers for dynamic resolution later\n  private readonly browserResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.browserPopupRedirectResolver);\n  private readonly cordovaResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.cordovaPopupRedirectResolver);\n  // The actual resolver in use: either browserResolver or cordovaResolver.\n  private underlyingResolver: exp.PopupRedirectResolverInternal | null = null;\n  _redirectPersistence = exp.browserSessionPersistence;\n\n  _completeRedirectFn: (\n    auth: exp.Auth,\n    resolver: exp.PopupRedirectResolver,\n    bypassAuthState: boolean\n  ) => Promise<exp.UserCredential | null> = exp._getRedirectResult;\n  _overrideRedirectResult = exp._overrideRedirectResult;\n\n  async _initialize(auth: exp.AuthImpl): Promise<exp.EventManager> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n\n  async _openPopup(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<exp.AuthPopup> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  async _openRedirect(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  _isIframeWebStorageSupported(\n    auth: exp.AuthImpl,\n    cb: (support: boolean) => unknown\n  ): void {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n\n  _originValidation(auth: exp.Auth): Promise<void> {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n\n  get _shouldInitProactively(): boolean {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n\n  private get assertedUnderlyingResolver(): exp.PopupRedirectResolverInternal {\n    _assert(this.underlyingResolver, exp.AuthErrorCode.INTERNAL_ERROR);\n    return this.underlyingResolver;\n  }\n\n  private async selectUnderlyingResolver(): Promise<void> {\n    if (this.underlyingResolver) {\n      return;\n    }\n\n    // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova\n      ? this.cordovaResolver\n      : this.browserResolver;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Forward direction wrapper from Compat --unwrap-> Exp */\nexport interface Wrapper<T> {\n  unwrap(): T;\n}\n\n/** Reverse direction wrapper from Exp --wrapped--> Compat */\nexport interface ReverseWrapper<T> {\n  wrapped(): T;\n}\n\nexport function unwrap<T>(object: unknown): T {\n  return (object as Wrapper<T>).unwrap();\n}\n\nexport function wrapped<T>(object: unknown): T {\n  return (object as ReverseWrapper<T>).wrapped();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { FirebaseError } from '@firebase/util';\nimport { Auth } from './auth';\nimport { User } from './user';\nimport { unwrap, wrapped } from './wrap';\n\nfunction credentialFromResponse(\n  userCredential: exp.UserCredentialInternal\n): exp.AuthCredential | null {\n  return credentialFromObject(userCredential);\n}\n\nfunction attachExtraErrorFields(auth: exp.Auth, e: FirebaseError): void {\n  // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n  const response = (e.customData as exp.TaggedWithTokenResponse | undefined)\n    ?._tokenResponse as unknown as Record<string, string>;\n  if ((e as FirebaseError)?.code === 'auth/multi-factor-auth-required') {\n    const mfaErr = e as compat.MultiFactorError;\n    mfaErr.resolver = new MultiFactorResolver(\n      auth,\n      exp.getMultiFactorResolver(auth, e as exp.MultiFactorError)\n    );\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e as compat.AuthError;\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\n\nfunction credentialFromObject(\n  object: FirebaseError | exp.UserCredential\n): exp.AuthCredential | null {\n  const { _tokenResponse } = (\n    object instanceof FirebaseError ? object.customData : object\n  ) as exp.TaggedWithTokenResponse;\n  if (!_tokenResponse) {\n    return null;\n  }\n\n  // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n\n  const providerId = _tokenResponse.providerId;\n\n  // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n\n  let provider: Pick<\n    typeof exp.OAuthProvider,\n    'credentialFromResult' | 'credentialFromError'\n  >;\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse as exp.SignInWithIdpResponse;\n      if (\n        !oauthAccessToken &&\n        !oauthTokenSecret &&\n        !oauthIdToken &&\n        !pendingToken\n      ) {\n        return null;\n      }\n      // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n\n  return object instanceof FirebaseError\n    ? provider.credentialFromError(object)\n    : provider.credentialFromResult(object);\n}\n\nexport function convertCredential(\n  auth: exp.Auth,\n  credentialPromise: Promise<exp.UserCredential>\n): Promise<compat.UserCredential> {\n  return credentialPromise\n    .catch(e => {\n      if (e instanceof FirebaseError) {\n        attachExtraErrorFields(auth, e);\n      }\n      throw e;\n    })\n    .then(credential => {\n      const operationType = credential.operationType;\n      const user = credential.user;\n\n      return {\n        operationType,\n        credential: credentialFromResponse(\n          credential as exp.UserCredentialInternal\n        ),\n        additionalUserInfo: exp.getAdditionalUserInfo(\n          credential as exp.UserCredential\n        ),\n        user: User.getOrCreate(user)\n      };\n    });\n}\n\nexport async function convertConfirmationResult(\n  auth: exp.Auth,\n  confirmationResultPromise: Promise<exp.ConfirmationResult>\n): Promise<compat.ConfirmationResult> {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: (verificationCode: string) =>\n      convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\n\nclass MultiFactorResolver implements compat.MultiFactorResolver {\n  readonly auth: Auth;\n  constructor(\n    auth: exp.Auth,\n    private readonly resolver: exp.MultiFactorResolver\n  ) {\n    this.auth = wrapped(auth);\n  }\n\n  get session(): compat.MultiFactorSession {\n    return this.resolver.session;\n  }\n\n  get hints(): compat.MultiFactorInfo[] {\n    return this.resolver.hints;\n  }\n\n  resolveSignIn(\n    assertion: compat.MultiFactorAssertion\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      unwrap(this.auth),\n      this.resolver.resolveSignIn(assertion as exp.MultiFactorAssertion)\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\nimport { _savePersistenceForRedirect } from './persistence';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\n\nexport class User implements compat.User, Compat<exp.User> {\n  // Maintain a map so that there's always a 1:1 mapping between new User and\n  // legacy compat users\n  private static readonly USER_MAP = new WeakMap<exp.User, User>();\n\n  readonly multiFactor: compat.MultiFactorUser;\n\n  private constructor(readonly _delegate: exp.User) {\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n\n  static getOrCreate(user: exp.User): User {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n\n    return User.USER_MAP.get(user)!;\n  }\n\n  delete(): Promise<void> {\n    return this._delegate.delete();\n  }\n  reload(): Promise<void> {\n    return this._delegate.reload();\n  }\n  toJSON(): object {\n    return this._delegate.toJSON();\n  }\n  getIdTokenResult(forceRefresh?: boolean): Promise<compat.IdTokenResult> {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n  getIdToken(forceRefresh?: boolean): Promise<string> {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n  linkAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.linkWithCredential(credential);\n  }\n  async linkWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  async linkWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier)\n    );\n  }\n  async linkWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async linkWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  reauthenticateAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.reauthenticateWithCredential(credential);\n  }\n  async reauthenticateWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth as unknown as exp.Auth,\n      exp.reauthenticateWithCredential(\n        this._delegate,\n        credential as exp.AuthCredential\n      )\n    );\n  }\n  reauthenticateWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.reauthenticateWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  reauthenticateWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.reauthenticateWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async reauthenticateWithRedirect(\n    provider: compat.AuthProvider\n  ): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  sendEmailVerification(\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n  async unlink(providerId: string): Promise<compat.User> {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n  updateEmail(newEmail: string): Promise<void> {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n  updatePassword(newPassword: string): Promise<void> {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n  updatePhoneNumber(phoneCredential: compat.AuthCredential): Promise<void> {\n    return exp.updatePhoneNumber(\n      this._delegate,\n      phoneCredential as exp.PhoneAuthCredential\n    );\n  }\n  updateProfile(profile: {\n    displayName?: string | null;\n    photoURL?: string | null;\n  }): Promise<void> {\n    return exp.updateProfile(this._delegate, profile);\n  }\n  verifyBeforeUpdateEmail(\n    newEmail: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.verifyBeforeUpdateEmail(\n      this._delegate,\n      newEmail,\n      actionCodeSettings\n    );\n  }\n  get emailVerified(): boolean {\n    return this._delegate.emailVerified;\n  }\n  get isAnonymous(): boolean {\n    return this._delegate.isAnonymous;\n  }\n  get metadata(): compat.UserMetadata {\n    return this._delegate.metadata;\n  }\n  get phoneNumber(): string | null {\n    return this._delegate.phoneNumber;\n  }\n  get providerData(): Array<compat.UserInfo | null> {\n    return this._delegate.providerData;\n  }\n  get refreshToken(): string {\n    return this._delegate.refreshToken;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  get displayName(): string | null {\n    return this._delegate.displayName;\n  }\n  get email(): string | null {\n    return this._delegate.email;\n  }\n  get photoURL(): string | null {\n    return this._delegate.photoURL;\n  }\n  get providerId(): string {\n    return this._delegate.providerId;\n  }\n  get uid(): string {\n    return this._delegate.uid;\n  }\n  private get auth(): exp.Auth {\n    return (this._delegate as exp.UserImpl).auth as unknown as exp.Auth;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, Observer, Unsubscribe } from '@firebase/util';\n\nimport {\n  _validatePersistenceArgument,\n  Persistence,\n  _getPersistencesFromRedirect,\n  _savePersistenceForRedirect\n} from './persistence';\nimport { _isPopupRedirectSupported } from './platform';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport { User } from './user';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\nimport { ReverseWrapper, Wrapper } from './wrap';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class Auth\n  implements compat.FirebaseAuth, Wrapper<exp.Auth>, _FirebaseService\n{\n  static Persistence = Persistence;\n  readonly _delegate: exp.AuthImpl;\n\n  constructor(readonly app: FirebaseApp, provider: Provider<'auth'>) {\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate() as exp.AuthImpl;\n      this.linkUnderlyingAuth();\n      return;\n    }\n\n    const { apiKey } = app.options;\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // Only use a popup/redirect resolver in browser environments\n    const resolver =\n      typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    }) as exp.AuthImpl;\n\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n    this.linkUnderlyingAuth();\n  }\n\n  get emulatorConfig(): compat.EmulatorConfig | null {\n    return this._delegate.emulatorConfig;\n  }\n\n  get currentUser(): compat.User | null {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n  get languageCode(): string | null {\n    return this._delegate.languageCode;\n  }\n  set languageCode(languageCode: string | null) {\n    this._delegate.languageCode = languageCode;\n  }\n  get settings(): compat.AuthSettings {\n    return this._delegate.settings;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  set tenantId(tid: string | null) {\n    this._delegate.tenantId = tid;\n  }\n  useDeviceLanguage(): void {\n    this._delegate.useDeviceLanguage();\n  }\n  signOut(): Promise<void> {\n    return this._delegate.signOut();\n  }\n  useEmulator(url: string, options?: { disableWarnings: boolean }): void {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n  applyActionCode(code: string): Promise<void> {\n    return exp.applyActionCode(this._delegate, code);\n  }\n\n  checkActionCode(code: string): Promise<compat.ActionCodeInfo> {\n    return exp.checkActionCode(this._delegate, code);\n  }\n\n  confirmPasswordReset(code: string, newPassword: string): Promise<void> {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n\n  async createUserWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.createUserWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  fetchProvidersForEmail(email: string): Promise<string[]> {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n  fetchSignInMethodsForEmail(email: string): Promise<string[]> {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n  isSignInWithEmailLink(emailLink: string): boolean {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n  async getRedirectResult(): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const credential = await exp.getRedirectResult(\n      this._delegate,\n      CompatPopupRedirectResolver\n    );\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  }\n\n  // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n  addFrameworkForLogging(framework: string): void {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onAuthStateChanged(next!, error, complete);\n  }\n  onIdTokenChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onIdTokenChanged(next!, error, complete);\n  }\n  sendSignInLinkToEmail(\n    email: string,\n    actionCodeSettings: compat.ActionCodeSettings\n  ): Promise<void> {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n  sendPasswordResetEmail(\n    email: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendPasswordResetEmail(\n      this._delegate,\n      email,\n      actionCodeSettings || undefined\n    );\n  }\n  async setPersistence(persistence: string): Promise<void> {\n    _validatePersistenceArgument(this._delegate, persistence);\n    let converted;\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp\n          ._getInstance<exp.PersistenceInternal>(exp.indexedDBLocalPersistence)\n          ._isAvailable();\n        converted = isIndexedDBFullySupported\n          ? exp.indexedDBLocalPersistence\n          : exp.browserLocalPersistence;\n        break;\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n      default:\n        return exp._fail(exp.AuthErrorCode.ARGUMENT_ERROR, {\n          appName: this._delegate.name\n        });\n    }\n\n    return this._delegate.setPersistence(converted);\n  }\n\n  signInAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.signInWithCredential(credential);\n  }\n  signInAnonymously(): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInAnonymously(this._delegate)\n    );\n  }\n  signInWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  signInWithCustomToken(token: string): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCustomToken(this._delegate, token)\n    );\n  }\n  signInWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  signInWithEmailLink(\n    email: string,\n    emailLink?: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailLink(this._delegate, email, emailLink)\n    );\n  }\n  signInWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this._delegate,\n      exp.signInWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  async signInWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    return convertCredential(\n      this._delegate,\n      exp.signInWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async signInWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  updateCurrentUser(user: compat.User | null): Promise<void> {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n  verifyPasswordResetCode(code: string): Promise<string> {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n  unwrap(): exp.Auth {\n    return this._delegate;\n  }\n  _delete(): Promise<void> {\n    return this._delegate._delete();\n  }\n  private linkUnderlyingAuth(): void {\n    (this._delegate as unknown as ReverseWrapper<Auth>).wrapped = () => this;\n  }\n}\n\nfunction wrapObservers(\n  nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n  error?: (error: compat.Error) => unknown,\n  complete?: Unsubscribe\n): Partial<Observer<exp.User | null>> {\n  let next = nextOrObserver;\n  if (typeof nextOrObserver !== 'function') {\n    ({ next, error, complete } = nextOrObserver);\n  }\n\n  // We know 'next' is now a function\n  const oldNext = next as (a: compat.User | null) => unknown;\n\n  const newNext = (user: exp.User | null): unknown =>\n    oldNext(user && User.getOrCreate(user as exp.User));\n  return {\n    next: newNext,\n    error: error as ErrorFn,\n    complete\n  };\n}\n\nfunction buildPersistenceHierarchy(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName);\n\n  // If \"self\" is available, add indexedDB\n  if (\n    typeof self !== 'undefined' &&\n    !persistences.includes(exp.indexedDBLocalPersistence)\n  ) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  }\n\n  // If \"window\" is available, add HTML Storage persistences\n  if (typeof window !== 'undefined') {\n    for (const persistence of [\n      exp.browserLocalPersistence,\n      exp.browserSessionPersistence\n    ]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  }\n\n  // Add in-memory as a final fallback\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n\n  return persistences;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport firebase from '@firebase/app-compat';\nimport { Compat } from '@firebase/util';\nimport { unwrap } from './wrap';\n\nexport class PhoneAuthProvider\n  implements compat.PhoneAuthProvider, Compat<exp.PhoneAuthProvider>\n{\n  providerId = 'phone';\n  readonly _delegate: exp.PhoneAuthProvider;\n\n  static PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\n  static PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): compat.AuthCredential {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n\n  constructor() {\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth!()));\n  }\n\n  verifyPhoneNumber(\n    phoneInfoOptions:\n      | string\n      | compat.PhoneSingleFactorInfoOptions\n      | compat.PhoneMultiFactorEnrollInfoOptions\n      | compat.PhoneMultiFactorSignInInfoOptions,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<string> {\n    return this._delegate.verifyPhoneNumber(\n      // The implementation matches but the types are subtly incompatible\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      phoneInfoOptions as any,\n      applicationVerifier\n    );\n  }\n\n  unwrap(): exp.PhoneAuthProvider {\n    return this._delegate;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { FirebaseApp } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class RecaptchaVerifier\n  implements compat.RecaptchaVerifier, Compat<exp.ApplicationVerifier>\n{\n  readonly _delegate: exp.RecaptchaVerifier;\n  type: string;\n  constructor(\n    container: HTMLElement | string,\n    parameters?: object | null,\n    app: FirebaseApp = firebase.app()\n  ) {\n    // API key is required for web client RPC calls.\n    _assert(app.options?.apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n    this._delegate = new exp.RecaptchaVerifier(\n      // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n      // @ts-ignore\n      app.auth!(),\n      container,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parameters as any\n    );\n    this.type = this._delegate.type;\n  }\n  clear(): void {\n    this._delegate.clear();\n  }\n  render(): Promise<number> {\n    return this._delegate.render();\n  }\n  verify(): Promise<string> {\n    return this._delegate.verify();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport * as impl from '@firebase/auth/internal';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { FirebaseError } from '@firebase/util';\n\nimport * as types from '@firebase/auth-types';\nimport { name, version } from './package.json';\nimport { Auth } from './src/auth';\nimport { PhoneAuthProvider as CompatAuthProvider } from './src/phone_auth_provider';\nimport { RecaptchaVerifier as CompatRecaptchaVerifier } from './src/recaptcha_verifier';\n\nconst AUTH_TYPE = 'auth-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'auth-compat': types.FirebaseAuth;\n  }\n}\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    auth: {\n      (app?: FirebaseApp): types.FirebaseAuth;\n      Auth: typeof types.FirebaseAuth;\n      EmailAuthProvider: typeof types.EmailAuthProvider;\n      EmailAuthProvider_Instance: typeof types.EmailAuthProvider_Instance;\n      FacebookAuthProvider: typeof types.FacebookAuthProvider;\n      FacebookAuthProvider_Instance: typeof types.FacebookAuthProvider_Instance;\n      GithubAuthProvider: typeof types.GithubAuthProvider;\n      GithubAuthProvider_Instance: typeof types.GithubAuthProvider_Instance;\n      GoogleAuthProvider: typeof types.GoogleAuthProvider;\n      GoogleAuthProvider_Instance: typeof types.GoogleAuthProvider_Instance;\n      OAuthProvider: typeof types.OAuthProvider;\n      SAMLAuthProvider: typeof types.SAMLAuthProvider;\n      PhoneAuthProvider: typeof types.PhoneAuthProvider;\n      PhoneAuthProvider_Instance: typeof types.PhoneAuthProvider_Instance;\n      PhoneMultiFactorGenerator: typeof types.PhoneMultiFactorGenerator;\n      RecaptchaVerifier: typeof types.RecaptchaVerifier;\n      RecaptchaVerifier_Instance: typeof types.RecaptchaVerifier_Instance;\n      TwitterAuthProvider: typeof types.TwitterAuthProvider;\n      TwitterAuthProvider_Instance: typeof types.TwitterAuthProvider_Instance;\n    };\n  }\n  interface FirebaseApp {\n    auth?(): types.FirebaseAuth;\n  }\n}\n\n// Create auth components to register with firebase.\n// Provides Auth public APIs.\nfunction registerAuthCompat(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      AUTH_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app-compat').getImmediate();\n        const authProvider = container.getProvider('auth');\n        return new Auth(app, authProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ActionCodeInfo: {\n          Operation: {\n            EMAIL_SIGNIN: impl.ActionCodeOperation.EMAIL_SIGNIN,\n            PASSWORD_RESET: impl.ActionCodeOperation.PASSWORD_RESET,\n            RECOVER_EMAIL: impl.ActionCodeOperation.RECOVER_EMAIL,\n            REVERT_SECOND_FACTOR_ADDITION:\n              impl.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n            VERIFY_AND_CHANGE_EMAIL:\n              impl.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n            VERIFY_EMAIL: impl.ActionCodeOperation.VERIFY_EMAIL\n          }\n        },\n        EmailAuthProvider: impl.EmailAuthProvider,\n        FacebookAuthProvider: impl.FacebookAuthProvider,\n        GithubAuthProvider: impl.GithubAuthProvider,\n        GoogleAuthProvider: impl.GoogleAuthProvider,\n        OAuthProvider: impl.OAuthProvider,\n        SAMLAuthProvider: impl.SAMLAuthProvider,\n        PhoneAuthProvider: CompatAuthProvider,\n        PhoneMultiFactorGenerator: impl.PhoneMultiFactorGenerator,\n        RecaptchaVerifier: CompatRecaptchaVerifier,\n        TwitterAuthProvider: impl.TwitterAuthProvider,\n        Auth,\n        AuthCredential: impl.AuthCredential,\n        Error: FirebaseError\n      })\n      .setInstantiationMode(InstantiationMode.LAZY)\n      .setMultipleInstances(false)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterAuthCompat(firebase as _FirebaseNamespace);\n"],
  "mappings": "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",
  "names": ["storage", "_assert", "PhoneAuthProvider", "RecaptchaVerifier", "CompatAuthProvider", "CompatRecaptchaVerifier"]
}
